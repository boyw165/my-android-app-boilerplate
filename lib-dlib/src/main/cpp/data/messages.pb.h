// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace com {
namespace my {
namespace jni {
namespace dlib {
namespace data {
class Face;
class FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class FaceList;
class FaceListDefaultTypeInternal;
extern FaceListDefaultTypeInternal _FaceList_default_instance_;
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
}  // namespace data
}  // namespace dlib
}  // namespace jni
}  // namespace my
}  // namespace com

namespace com {
namespace my {
namespace jni {
namespace dlib {
namespace data {

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_messages_2eproto

// ===================================================================

class Landmark : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.my.jni.dlib.data.Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }

  static const Landmark& default_instance();

  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }

  void Swap(Landmark* other);

  // implements Message ----------------------------------------------

  inline Landmark* New() const PROTOBUF_FINAL { return New(NULL); }

  Landmark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Landmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.my.jni.dlib.data.Landmark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable int _cached_size_;
  friend struct  protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.my.jni.dlib.data.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const Face& default_instance();

  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
               &_Face_default_instance_);
  }

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const PROTOBUF_FINAL { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandmarksFieldNumber = 1;
  const ::com::my::jni::dlib::data::Landmark& landmarks(int index) const;
  ::com::my::jni::dlib::data::Landmark* mutable_landmarks(int index);
  ::com::my::jni::dlib::data::Landmark* add_landmarks();
  ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >*
      mutable_landmarks();
  const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >&
      landmarks() const;

  // @@protoc_insertion_point(class_scope:com.my.jni.dlib.data.Face)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark > landmarks_;
  mutable int _cached_size_;
  friend struct  protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FaceList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.my.jni.dlib.data.FaceList) */ {
 public:
  FaceList();
  virtual ~FaceList();

  FaceList(const FaceList& from);

  inline FaceList& operator=(const FaceList& from) {
    CopyFrom(from);
    return *this;
  }

  static const FaceList& default_instance();

  static inline const FaceList* internal_default_instance() {
    return reinterpret_cast<const FaceList*>(
               &_FaceList_default_instance_);
  }

  void Swap(FaceList* other);

  // implements Message ----------------------------------------------

  inline FaceList* New() const PROTOBUF_FINAL { return New(NULL); }

  FaceList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FaceList& from);
  void MergeFrom(const FaceList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.my.jni.dlib.data.Face faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::com::my::jni::dlib::data::Face& faces(int index) const;
  ::com::my::jni::dlib::data::Face* mutable_faces(int index);
  ::com::my::jni::dlib::data::Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >&
      faces() const;

  // @@protoc_insertion_point(class_scope:com.my.jni.dlib.data.FaceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face > faces_;
  mutable int _cached_size_;
  friend struct  protobuf_messages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmark

// uint32 x = 1;
inline void Landmark::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 Landmark::x() const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Landmark.x)
  return x_;
}
inline void Landmark::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:com.my.jni.dlib.data.Landmark.x)
}

// uint32 y = 2;
inline void Landmark::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 Landmark::y() const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Landmark.y)
  return y_;
}
inline void Landmark::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:com.my.jni.dlib.data.Landmark.y)
}

// -------------------------------------------------------------------

// Face

// repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
inline int Face::landmarks_size() const {
  return landmarks_.size();
}
inline void Face::clear_landmarks() {
  landmarks_.Clear();
}
inline const ::com::my::jni::dlib::data::Landmark& Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Get(index);
}
inline ::com::my::jni::dlib::data::Landmark* Face::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Mutable(index);
}
inline ::com::my::jni::dlib::data::Landmark* Face::add_landmarks() {
  // @@protoc_insertion_point(field_add:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >*
Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:com.my.jni.dlib.data.Face.landmarks)
  return &landmarks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >&
Face::landmarks() const {
  // @@protoc_insertion_point(field_list:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_;
}

// -------------------------------------------------------------------

// FaceList

// repeated .com.my.jni.dlib.data.Face faces = 1;
inline int FaceList::faces_size() const {
  return faces_.size();
}
inline void FaceList::clear_faces() {
  faces_.Clear();
}
inline const ::com::my::jni::dlib::data::Face& FaceList::faces(int index) const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Get(index);
}
inline ::com::my::jni::dlib::data::Face* FaceList::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Mutable(index);
}
inline ::com::my::jni::dlib::data::Face* FaceList::add_faces() {
  // @@protoc_insertion_point(field_add:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >*
FaceList::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:com.my.jni.dlib.data.FaceList.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >&
FaceList::faces() const {
  // @@protoc_insertion_point(field_list:com.my.jni.dlib.data.FaceList.faces)
  return faces_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data
}  // namespace dlib
}  // namespace jni
}  // namespace my
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
