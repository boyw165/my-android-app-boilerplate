// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace my {
namespace jni {
namespace dlib {
namespace data {
class LandmarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Landmark> {
} _Landmark_default_instance_;
class FaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Face> {
} _Face_default_instance_;
class FaceListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceList> {
} _FaceList_default_instance_;

namespace protobuf_messages_2eproto {


void TableStruct::Shutdown() {
  _Landmark_default_instance_.Shutdown();
  _Face_default_instance_.Shutdown();
  _FaceList_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Landmark_default_instance_.DefaultConstruct();
  _Face_default_instance_.DefaultConstruct();
  _FaceList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_messages_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kXFieldNumber;
const int Landmark::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
}

void Landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Landmark& Landmark::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Landmark* Landmark::New(::google::protobuf::Arena* arena) const {
  Landmark* n = new Landmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.Landmark)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.Landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.Landmark)
  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.Landmark)
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.Landmark)
  size_t total_size = 0;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Landmark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Landmark*>(&from));
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Landmark::GetTypeName() const {
  return "com.my.jni.dlib.data.Landmark";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmark

// uint32 x = 1;
void Landmark::clear_x() {
  x_ = 0u;
}
::google::protobuf::uint32 Landmark::x() const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Landmark.x)
  return x_;
}
void Landmark::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:com.my.jni.dlib.data.Landmark.x)
}

// uint32 y = 2;
void Landmark::clear_y() {
  y_ = 0u;
}
::google::protobuf::uint32 Landmark::y() const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Landmark.y)
  return y_;
}
void Landmark::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:com.my.jni.dlib.data.Landmark.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.Face)
}
Face::Face(const Face& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      landmarks_(from.landmarks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.Face)
}

void Face::SharedCtor() {
  _cached_size_ = 0;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.Face)
  SharedDtor();
}

void Face::SharedDtor() {
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Face& Face::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.Face)
  landmarks_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.Face)
  // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->landmarks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.Face)
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.Face)
  size_t total_size = 0;

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
  {
    unsigned int count = this->landmarks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmarks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Face*>(&from));
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landmarks_.MergeFrom(from.landmarks_);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  landmarks_.UnsafeArenaSwap(&other->landmarks_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Face::GetTypeName() const {
  return "com.my.jni.dlib.data.Face";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
int Face::landmarks_size() const {
  return landmarks_.size();
}
void Face::clear_landmarks() {
  landmarks_.Clear();
}
const ::com::my::jni::dlib::data::Landmark& Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Get(index);
}
::com::my::jni::dlib::data::Landmark* Face::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Mutable(index);
}
::com::my::jni::dlib::data::Landmark* Face::add_landmarks() {
  // @@protoc_insertion_point(field_add:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >*
Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:com.my.jni.dlib.data.Face.landmarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Landmark >&
Face::landmarks() const {
  // @@protoc_insertion_point(field_list:com.my.jni.dlib.data.Face.landmarks)
  return landmarks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceList::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceList::FaceList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.FaceList)
}
FaceList::FaceList(const FaceList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      faces_(from.faces_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.FaceList)
}

void FaceList::SharedCtor() {
  _cached_size_ = 0;
}

FaceList::~FaceList() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.FaceList)
  SharedDtor();
}

void FaceList::SharedDtor() {
}

void FaceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaceList& FaceList::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceList* FaceList::New(::google::protobuf::Arena* arena) const {
  FaceList* n = new FaceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.FaceList)
  faces_.Clear();
}

bool FaceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.FaceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.my.jni.dlib.data.Face faces = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.FaceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.FaceList)
  return false;
#undef DO_
}

void FaceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.FaceList)
  // repeated .com.my.jni.dlib.data.Face faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.FaceList)
}

size_t FaceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.FaceList)
  size_t total_size = 0;

  // repeated .com.my.jni.dlib.data.Face faces = 1;
  {
    unsigned int count = this->faces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faces(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FaceList*>(&from));
}

void FaceList::MergeFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.FaceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  faces_.MergeFrom(from.faces_);
}

void FaceList::CopyFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.FaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceList::IsInitialized() const {
  return true;
}

void FaceList::Swap(FaceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceList::InternalSwap(FaceList* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FaceList::GetTypeName() const {
  return "com.my.jni.dlib.data.FaceList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceList

// repeated .com.my.jni.dlib.data.Face faces = 1;
int FaceList::faces_size() const {
  return faces_.size();
}
void FaceList::clear_faces() {
  faces_.Clear();
}
const ::com::my::jni::dlib::data::Face& FaceList::faces(int index) const {
  // @@protoc_insertion_point(field_get:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Get(index);
}
::com::my::jni::dlib::data::Face* FaceList::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Mutable(index);
}
::com::my::jni::dlib::data::Face* FaceList::add_faces() {
  // @@protoc_insertion_point(field_add:com.my.jni.dlib.data.FaceList.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >*
FaceList::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:com.my.jni.dlib.data.FaceList.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::com::my::jni::dlib::data::Face >&
FaceList::faces() const {
  // @@protoc_insertion_point(field_list:com.my.jni.dlib.data.FaceList.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace dlib
}  // namespace jni
}  // namespace my
}  // namespace com

// @@protoc_insertion_point(global_scope)
